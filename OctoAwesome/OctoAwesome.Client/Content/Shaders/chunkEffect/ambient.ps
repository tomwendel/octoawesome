#version 130
uniform float AmbientIntensity;
uniform vec4 AmbientColor;
uniform float DiffuseIntensity;
uniform vec4 DiffuseColor;
uniform vec3 DiffuseDirection;
uniform sampler2DArray BlockTextures;
uniform float OverrideLightLevel;

uniform sampler2DShadow ShadowMap;

in vec3 psNormal;
in vec2 psTexcoord;
flat in uint psTexIndex;
in float psLightLevel;
in vec4 shadowCoord;

out vec4 outColor;
float random(vec4 seed4)
{
    float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
    return fract(sin(dot_product) * 43758.5453);
}
float sampleShadow(float cosTheta)
{
    vec2 poissonDisk[4] = vec2[](
      vec2( -0.94201624, -0.39906216 ),
      vec2( 0.94558609, -0.76890725 ),
      vec2( -0.094184101, -0.92938870 ),
      vec2( 0.34495938, 0.29387760 )
    );
    
    float bias = 0.0005*tan(acos(cosTheta)); // cosTheta is dot( n,l ), clamped between 0 and 1
    bias = clamp(bias, 0,0.00001); // 0.00001
    float visibility = 1.0;
    for (int i=0;i<4;i++){
        int index = int(16.0*random(vec4(gl_FragCoord.xyy, i)))%4;
        visibility-=0.2 * (1.0 - texture( ShadowMap, vec3(shadowCoord.xy + poissonDisk[i]/6000.0, (shadowCoord.z-bias)/shadowCoord.w)));
    }
    return (visibility);
}

void main()
{

    float cosTheta = clamp(dot(-DiffuseDirection,psNormal),0.0,1.0);
    float visibility = sampleShadow(cosTheta);//(clamp(texture(ShadowMap, vec3(shadowCoord.xy/shadowCoord.w,shadowCoord.z - bias)), 0.0, 1.0) + 1.0) / 2.0;
	vec4 texColor = texture(BlockTextures,vec3(psTexcoord,psTexIndex));
	vec4 ambient = AmbientColor * AmbientIntensity * max(psLightLevel, OverrideLightLevel);
	vec4 diffuse = visibility * cosTheta * DiffuseColor * DiffuseIntensity;
	outColor = texColor * clamp(ambient + vec4(diffuse.rgb,1.0),0.0,1.0);
}
